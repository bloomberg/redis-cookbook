# sentinel.conf

# port <sentinel-port>
# The port that this sentinel instance will run on
<% if @new_resource.sentinel_port %>
port <%= @new_resource.sentinel_port %>
<% end %>

# sentinel announce-ip <ip>
# sentinel announce-port <port>
# The above two configuration directives are useful in environments where,
# because of NAT, Sentinel is reachable from outside via a non-local address.
<% if @resource.sentinel_announce_ip %>
sentinel announce-ip <%= @resource.sentinel_announce_ip %>
<% end %>
<% if @resource.sentinel_announce_port %>
sentinel announce-port <%= @resource.sentinel_announce_port %>
<% end %>

# dir <working-directory>
# Every long running process should have a well-defined working directory.
# For Redis Sentinel to chdir to /tmp at startup is the simplest thing
# for the process to don't interfere with administrative tasks such as
# unmounting filesystems.
<% if @new_resource.directory %>
dir <%= @new_resource.directory %>
<% end %>

# Specify the log file name. Also 'stdout' can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
<% if @new_resource.logfile %>
logfile <%= @new_resource.logfile %>
<% end %>

# sentinel monitor <%= @new_resource.sentinel_master_name %> <ip> <redis-port> <quorum>
#
# Tells Sentinel to monitor this master, and to consider it in O_DOWN
# (Objectively Down) state only if at least <quorum> sentinels agree.
#
# Note that whatever is the ODOWN quorum, a Sentinel will require to
# be elected by the majority of the known Sentinels in order to
# start a failover, so no failover can be performed in minority.
#
# Note: master name should not include special characters or spaces.
# The valid charset is A-z 0-9 and the three characters ".-_".
<% if @new_resource.sentinel_monitor %>
sentinel monitor <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_monitor %>
<% end %>

# sentinel auth-pass <%= @new_resource.sentinel_master_name %> <password>
#
# Set the password to use to authenticate with the master and slaves.
# Useful if there is a password set in the Redis instances to monitor.
#
# Note that the master password is also used for slaves, so it is not
# possible to set a different password in masters and slaves instances
# if you want to be able to monitor these instances with Sentinel.
#
# However you can have Redis instances without the authentication enabled
# mixed with Redis instances requiring the authentication (as long as the
# password set is the same for all the instances requiring the password) as
# the AUTH command will have no effect in Redis instances with authentication
# switched off.
#
# Example:
#
<% if @new_resource.sentinel_auth %>
sentinel auth-pass <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_auth %>
<% end %>

# sentinel down-after-milliseconds <%= @new_resource.sentinel_master_name %> <milliseconds>
#
# Number of milliseconds the master (or any attached slave or sentinel) should
# be unreachable (as in, not acceptable reply to PING, continuously, for the
# specified period) in order to consider it in S_DOWN state (Subjectively
# Down).
#
# Default is 30 seconds.
<% if @new_resource.sentinel_down %>
sentinel down-after-milliseconds <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_down %>
<% end %>

# sentinel parallel-syncs <%= @new_resource.sentinel_master_name %> <numslaves>
#
# How many slaves we can configure to point to the new slave simultaneously
# during the failover. Use a low number if you use the slaves to serve query
# to avoid that all the slaves will be unreachable at about the same
# time while performing the synchronization with the master.
<% if @new_resource.sentinel_parallel %>
sentinel parallel-syncs <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_parallel %>
<% end %>
# sentinel failover-timeout <%= @new_resource.sentinel_master_name %> <milliseconds>
#
# Specifies the failover timeout in milliseconds. It is used in many ways:
#
# - The time needed to re-start a failover after a previous failover was
#   already tried against the same master by a given Sentinel, is two
#   times the failover timeout.
#
# - The time needed for a slave replicating to a wrong master according
#   to a Sentinel current configuration, to be forced to replicate
#   with the right master, is exactly the failover timeout (counting since
#   the moment a Sentinel detected the misconfiguration).
#
# - The time needed to cancel a failover that is already in progress but
#   did not produced any configuration change (SLAVEOF NO ONE yet not
#   acknowledged by the promoted slave).
#
# - The maximum time a failover in progress waits for all the slaves to be
#   reconfigured as slaves of the new master. However even after this time
#   the slaves will be reconfigured by the Sentinels anyway, but not with
#   the exact parallel-syncs progression as specified.
#
# Default is 3 minutes.
<% if @new_resource.sentinel_failover %>
sentinel failover-timeout <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_failover %>
<% end %>

# SCRIPTS EXECUTION
#
# sentinel notification-script and sentinel reconfig-script are used in order
# to configure scripts that are called to notify the system administrator
# or to reconfigure clients after a failover. The scripts are executed
# with the following rules for error handling:
#
# If script exists with "1" the execution is retried later (up to a maximum
# number of times currently set to 10).
#
# If script exists with "2" (or an higher value) the script execution is
# not retried.
#
# If script terminates because it receives a signal the behavior is the same
# as exit code 1.
#
# A script has a maximum running time of 60 seconds. After this limit is
# reached the script is terminated with a SIGKILL and the execution retried.

# NOTIFICATION SCRIPT
#
# sentinel notification-script <%= @new_resource.sentinel_master_name %> <script-path>
#
# Call the specified notification script for any sentinel event that is
# generated in the WARNING level (for instance -sdown, -odown, and so forth).
# This script should notify the system administrator via email, SMS, or any
# other messaging system, that there is something wrong with the monitored
# Redis systems.
#
# The script is called with just two arguments: the first is the event type
# and the second the event description.
#
# The script must exist and be executable in order for sentinel to start if
# this option is provided.
#
# Example:
#
<% if @new_resource.sentinel_notification %>
sentinel notification-script <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_notification %>
<% end %>

# CLIENTS RECONFIGURATION SCRIPT
#
# sentinel client-reconfig-script <%= @new_resource.sentinel_master_name %> <script-path>
#
# When the master changed because of a failover a script can be called in
# order to perform application-specific tasks to notify the clients that the
# configuration has changed and the master is at a different address.
#
# The following arguments are passed to the script:
#
# <%= @new_resource.sentinel_master_name %> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
#
# <state> is currently always "failover"
# <role> is either "leader" or "observer"
#
# The arguments from-ip, from-port, to-ip, to-port are used to communicate
# the old address of the master and the new address of the elected slave
# (now a master).
#
# This script should be resistant to multiple invocations.
#
# Example:
#
<% if @new_resource.sentinel_client_reconfig %>
sentinel client-reconfig-script <%= @new_resource.sentinel_master_name %> <%= @new_resource.sentinel_client_reconfig %>
<% end %>
